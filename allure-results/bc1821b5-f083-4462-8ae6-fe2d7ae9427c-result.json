{"name": "test_student_registration", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 10s, while waiting for:\nbrowser.all(('css selector', '[id^=google_ads_][id$=container__]')).has size greater than or equal 3\n\nReason: AssertionError: actual size: 0\nScreenshot: file:///Users/annavishnyakova/.selene/screenshots/1675074001892/1675074001893.png\nPageSource: file:///Users/annavishnyakova/.selene/screenshots/1675074001892/1675074001893.html", "trace": "fn = <selene.core.conditions.CollectionCondition object at 0x10e063430>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\nvenv/lib/python3.10/site-packages/selene/core/wait.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.conditions.CollectionCondition object at 0x10e063430>\nentity = <selene.core.entity.Collection object at 0x10e063280>\n\n    def __call__(self, entity: E) -> None:\n>       return self._fn(entity)\n\nvenv/lib/python3.10/site-packages/selene/core/condition.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nentity = <selene.core.entity.Collection object at 0x10e063280>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__\n            if query_to_str.startswith('<function')\n            else query_to_str\n        )\n        actual = query(entity)\n        if not predicate(actual):\n>           raise AssertionError(f'actual {result}: {actual}')\nE           AssertionError: actual size: 0\n\nvenv/lib/python3.10/site-packages/selene/core/condition.py:147: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_student_registration():\n        student = User(first_name='Anna',\n                       last_name='Vishnyakova',\n                       email='anna@gmail.com',\n                       phone_number='80000000000',\n                       birthday=datetime.date(1994, 7, 3),\n                       subject=[Subject.Arts, Subject.Maths],\n                       gender=Gender.Male,\n                       hobbies=[Hobbies.Sports, Hobbies.Music],\n                       picture='test.png',\n                       address='Moscow',\n                       state=State.Uttar_Pradesh,\n                       city=City.Lucknow)\n        automation_form = Practice_form()\n>       automation_form.open_page()\n\ntests/test_form_sending.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ndemoqa_tests_selene/model/pages/practice_form.py:18: in open_page\n    ads.with_(timeout=10).should(have.size_greater_than_or_equal(3)).perform(\nvenv/lib/python3.10/site-packages/selene/core/entity.py:1088: in should\n    self.wait.for_(condition)\nvenv/lib/python3.10/site-packages/selene/core/wait.py:147: in for_\n    return _(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.conditions.CollectionCondition object at 0x10e063430>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n    \n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 10s, while waiting for:\nE                   browser.all(('css selector', '[id^=google_ads_][id$=container__]')).has size greater than or equal 3\nE                   \nE                   Reason: AssertionError: actual size: 0\nE                   Screenshot: file:///Users/annavishnyakova/.selene/screenshots/1675074001892/1675074001893.png\nE                   PageSource: file:///Users/annavishnyakova/.selene/screenshots/1675074001892/1675074001893.html\n\nvenv/lib/python3.10/site-packages/selene/core/wait.py:145: TimeoutException"}, "attachments": [{"name": "stderr", "source": "bdd4083f-4b2f-43b2-9ccb-5a81df5edf27-attachment.txt", "type": "text/plain"}], "start": 1675074001922, "stop": 1675074027038, "uuid": "d57c13f4-f2c7-492c-a809-b8e2f85543bf", "historyId": "6b5f8a6a56fb816df0df51fa6c0ab55a", "testCaseId": "ed4d5db7aeda7e5de1ad28fc4b290af9", "fullName": "tests.test_form_sending#test_student_registration", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_form_sending"}, {"name": "host", "value": "MacBook-Pro-Anna.local"}, {"name": "thread", "value": "5395-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_form_sending"}]}