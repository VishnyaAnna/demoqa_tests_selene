{"name": "test_student_registration", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).set value: /Users/annavishnyakova/PycharmProjects/demoqa_tests_selene/tests/resources/test.png\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : /Users/annavishnyakova/PycharmProjects/demoqa_tests_selene/tests/resources/test.png\n  (Session info: chrome=109.0.5414.119)\nStacktrace:\n0   chromedriver                        0x00000001048e6fa8 chromedriver + 4886440\n1   chromedriver                        0x0000000104864643 chromedriver + 4351555\n2   chromedriver                        0x00000001044b2b27 chromedriver + 477991\n3   chromedriver                        0x00000001044ee425 chromedriver + 721957\n4   chromedriver                        0x000000010451d5d2 chromedriver + 914898\n5   chromedriver                        0x00000001044e93dd chromedriver + 701405\n6   chromedriver                        0x000000010451d78e chromedriver + 915342\n7   chromedriver                        0x00000001045385fe chromedriver + 1025534\n8   chromedriver                        0x000000010451d3a3 chromedriver + 914339\n9   chromedriver                        0x00000001044e757f chromedriver + 693631\n10  chromedriver                        0x00000001044e8b1e chromedriver + 699166\n11  chromedriver                        0x00000001048b3b9e chromedriver + 4676510\n12  chromedriver                        0x00000001048b891e chromedriver + 4696350\n13  chromedriver                        0x00000001048c019f chromedriver + 4727199\n14  chromedriver                        0x00000001048b981a chromedriver + 4700186\n15  chromedriver                        0x000000010488ca62 chromedriver + 4516450\n16  chromedriver                        0x00000001048d88c8 chromedriver + 4827336\n17  chromedriver                        0x00000001048d8a45 chromedriver + 4827717\n18  chromedriver                        0x00000001048ee7ef chromedriver + 4917231\n19  libsystem_pthread.dylib             0x00007ff8169bd4e1 _pthread_start + 125\n20  libsystem_pthread.dylib             0x00007ff8169b8f6b thread_start + 15\n\nScreenshot: file:///Users/annavishnyakova/.selene/screenshots/1675074102873/1675074102874.png\nPageSource: file:///Users/annavishnyakova/.selene/screenshots/1675074102873/1675074102874.html", "trace": "fn = <selene.core.wait.Command object at 0x10f7842b0>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\nvenv/lib/python3.10/site-packages/selene/core/wait.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.wait.Command object at 0x10f7842b0>\nentity = <selene.core.entity.Element object at 0x10f785480>\n\n    def __call__(self, entity: T) -> R:\n>       return self._fn(entity)\n\nvenv/lib/python3.10/site-packages/selene/core/wait.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nelement = <selene.core.entity.Element object at 0x10f785480>\n\n    def fn(element: Element):\n        webelement = (\n            element._actual_not_overlapped_webelement\n            if self.config.wait_for_no_overlap_found_by_js\n            else element()\n        )\n        webelement.clear()  # todo: change to impl based not on clear, because clear generates post-events...\n>       webelement.send_keys(str(value))\n\nvenv/lib/python3.10/site-packages/selene/core/entity.py:334: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"77b99b31f77ea9facf8121e5a542b082\", element=\"3d67a6ed-8f64-4c11-819c-5e02263f1578\")>\nvalue = ('/Users/annavishnyakova/PycharmProjects/demoqa_tests_selene/tests/resources/test.png',)\n\n    def send_keys(self, *value) -> None:\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element(By.NAME, 'username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element(By.NAME, 'profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n    \n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_files = list(map(lambda keys_to_send:\n                                   self.parent.file_detector.is_local_file(str(keys_to_send)),\n                                   ''.join(map(str, value)).split('\\n')))\n            if None not in local_files:\n                remote_files = []\n                for file in local_files:\n                    remote_files.append(self._upload(file))\n                value = '\\n'.join(remote_files)\n    \n>       self._execute(Command.SEND_KEYS_TO_ELEMENT,\n                      {'text': \"\".join(keys_to_typing(value)),\n                       'value': keys_to_typing(value)})\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"77b99b31f77ea9facf8121e5a542b082\", element=\"3d67a6ed-8f64-4c11-819c-5e02263f1578\")>\ncommand = 'sendKeysToElement'\nparams = {'id': '3d67a6ed-8f64-4c11-819c-5e02263f1578', 'sessionId': '77b99b31f77ea9facf8121e5a542b082', 'text': '/Users/annavishnyakova/PycharmProjects/demoqa_tests_selene/tests/resources/test.png', 'value': ['/', 'U', 's', 'e', 'r', 's', ...]}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:396: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"77b99b31f77ea9facf8121e5a542b082\")>\ndriver_command = 'sendKeysToElement'\nparams = {'id': '3d67a6ed-8f64-4c11-819c-5e02263f1578', 'text': '/Users/annavishnyakova/PycharmProjects/demoqa_tests_selene/tests/resources/test.png', 'value': ['/', 'U', 's', 'e', 'r', 's', ...]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10f786740>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : /Users/an...ff8169bd4e1 _pthread_start + 125\\\\n20  libsystem_pthread.dylib             0x00007ff8169b8f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : /Users/annavishnyakova/PycharmProjects/demoqa_tests_selene/tests/resources/test.png\nE         (Session info: chrome=109.0.5414.119)\nE       Stacktrace:\nE       0   chromedriver                        0x00000001048e6fa8 chromedriver + 4886440\nE       1   chromedriver                        0x0000000104864643 chromedriver + 4351555\nE       2   chromedriver                        0x00000001044b2b27 chromedriver + 477991\nE       3   chromedriver                        0x00000001044ee425 chromedriver + 721957\nE       4   chromedriver                        0x000000010451d5d2 chromedriver + 914898\nE       5   chromedriver                        0x00000001044e93dd chromedriver + 701405\nE       6   chromedriver                        0x000000010451d78e chromedriver + 915342\nE       7   chromedriver                        0x00000001045385fe chromedriver + 1025534\nE       8   chromedriver                        0x000000010451d3a3 chromedriver + 914339\nE       9   chromedriver                        0x00000001044e757f chromedriver + 693631\nE       10  chromedriver                        0x00000001044e8b1e chromedriver + 699166\nE       11  chromedriver                        0x00000001048b3b9e chromedriver + 4676510\nE       12  chromedriver                        0x00000001048b891e chromedriver + 4696350\nE       13  chromedriver                        0x00000001048c019f chromedriver + 4727199\nE       14  chromedriver                        0x00000001048b981a chromedriver + 4700186\nE       15  chromedriver                        0x000000010488ca62 chromedriver + 4516450\nE       16  chromedriver                        0x00000001048d88c8 chromedriver + 4827336\nE       17  chromedriver                        0x00000001048d8a45 chromedriver + 4827717\nE       18  chromedriver                        0x00000001048ee7ef chromedriver + 4917231\nE       19  libsystem_pthread.dylib             0x00007ff8169bd4e1 _pthread_start + 125\nE       20  libsystem_pthread.dylib             0x00007ff8169b8f6b thread_start + 15\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_student_registration():\n        student = User(first_name='Anna',\n                       last_name='Vishnyakova',\n                       email='anna@gmail.com',\n                       phone_number='80000000000',\n                       birthday=datetime.date(1994, 7, 3),\n                       subject=[Subject.Arts, Subject.Maths],\n                       gender=Gender.Male,\n                       hobbies=[Hobbies.Sports, Hobbies.Music],\n                       picture='test.png',\n                       address='Moscow',\n                       state=State.Uttar_Pradesh,\n                       city=City.Lucknow)\n        automation_form = Practice_form()\n        automation_form.open_page()\n>       automation_form.fill_form(student)\n\ntests/test_form_sending.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ndemoqa_tests_selene/model/pages/practice_form.py:88: in fill_form\n    self.insert_picture(student.picture)\ndemoqa_tests_selene/model/pages/practice_form.py:59: in insert_picture\n    path('#uploadPicture', file)\ndemoqa_tests_selene/utils/path_files.py:7: in path\n    browser.element(selector).set_value(\nvenv/lib/python3.10/site-packages/selene/core/entity.py:352: in set_value\n    self.wait.for_(\nvenv/lib/python3.10/site-packages/selene/core/wait.py:147: in for_\n    return _(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x10f7842b0>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n    \n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '#uploadPicture')).set value: /Users/annavishnyakova/PycharmProjects/demoqa_tests_selene/tests/resources/test.png\nE                   \nE                   Reason: InvalidArgumentException: Message: invalid argument: File not found : /Users/annavishnyakova/PycharmProjects/demoqa_tests_selene/tests/resources/test.png\nE                     (Session info: chrome=109.0.5414.119)\nE                   Stacktrace:\nE                   0   chromedriver                        0x00000001048e6fa8 chromedriver + 4886440\nE                   1   chromedriver                        0x0000000104864643 chromedriver + 4351555\nE                   2   chromedriver                        0x00000001044b2b27 chromedriver + 477991\nE                   3   chromedriver                        0x00000001044ee425 chromedriver + 721957\nE                   4   chromedriver                        0x000000010451d5d2 chromedriver + 914898\nE                   5   chromedriver                        0x00000001044e93dd chromedriver + 701405\nE                   6   chromedriver                        0x000000010451d78e chromedriver + 915342\nE                   7   chromedriver                        0x00000001045385fe chromedriver + 1025534\nE                   8   chromedriver                        0x000000010451d3a3 chromedriver + 914339\nE                   9   chromedriver                        0x00000001044e757f chromedriver + 693631\nE                   10  chromedriver                        0x00000001044e8b1e chromedriver + 699166\nE                   11  chromedriver                        0x00000001048b3b9e chromedriver + 4676510\nE                   12  chromedriver                        0x00000001048b891e chromedriver + 4696350\nE                   13  chromedriver                        0x00000001048c019f chromedriver + 4727199\nE                   14  chromedriver                        0x00000001048b981a chromedriver + 4700186\nE                   15  chromedriver                        0x000000010488ca62 chromedriver + 4516450\nE                   16  chromedriver                        0x00000001048d88c8 chromedriver + 4827336\nE                   17  chromedriver                        0x00000001048d8a45 chromedriver + 4827717\nE                   18  chromedriver                        0x00000001048ee7ef chromedriver + 4917231\nE                   19  libsystem_pthread.dylib             0x00007ff8169bd4e1 _pthread_start + 125\nE                   20  libsystem_pthread.dylib             0x00007ff8169b8f6b thread_start + 15\nE                   \nE                   Screenshot: file:///Users/annavishnyakova/.selene/screenshots/1675074102873/1675074102874.png\nE                   PageSource: file:///Users/annavishnyakova/.selene/screenshots/1675074102873/1675074102874.html\n\nvenv/lib/python3.10/site-packages/selene/core/wait.py:145: TimeoutException"}, "start": 1675074102904, "stop": 1675074132120, "uuid": "85783845-66e6-4446-bc3b-2cb658646cfb", "historyId": "6b5f8a6a56fb816df0df51fa6c0ab55a", "testCaseId": "ed4d5db7aeda7e5de1ad28fc4b290af9", "fullName": "tests.test_form_sending#test_student_registration", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_form_sending"}, {"name": "host", "value": "MacBook-Pro-Anna.local"}, {"name": "thread", "value": "5484-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_form_sending"}]}